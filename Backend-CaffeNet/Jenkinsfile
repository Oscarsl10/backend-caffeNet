pipeline {
    agent any

    stages {
        stage('Clonar') {
            steps {
                git branch: 'main', url: 'https://github.com/Oscarsl10/backend-caffeNet'
            }
        }

        stage('Compilar') {
            steps {
                dir('Backend-CaffeNet') {
                    sh 'chmod +x mvnw'
                    sh './mvnw clean package -DskipTests'
                }
            }
        }

        stage('Docker Build') {
            steps {
                dir('Backend-CaffeNet') {
                    // Recompila la imagen sin reiniciar contenedores
                    sh 'docker build -t backendcaffenet .'
                }
            }
        }

        stage('Actualizar sin reiniciar') {
            steps {
                script {
                    // Solo para asegurarse que el contenedor esté corriendo
                    def running = sh(script: "docker ps -q -f name=app", returnStdout: true).trim()
                    if (running) {
                        echo 'Contenedor del backend en ejecución, no se reinicia'
                    } else {
                        echo 'Contenedor no encontrado, iniciando manualmente'
                        sh 'docker compose up -d'
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completado (sin reiniciar contenedores existentes)'
            sh 'docker ps'
        }
        failure {
            echo 'El pipeline ha fallado'
        }
    }
}
